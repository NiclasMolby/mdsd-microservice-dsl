/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.mdsd.micro_lang.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mdsd.micro_lang.microLang.Element
import dk.sdu.mdsd.micro_lang.microLang.Template
import dk.sdu.mdsd.micro_lang.microLang.Microservice
import com.google.common.base.CaseFormat
import dk.sdu.mdsd.micro_lang.microLang.Uses
import dk.sdu.mdsd.micro_lang.microLang.Implements
import dk.sdu.mdsd.micro_lang.microLang.Endpoint
import com.google.inject.Inject
import dk.sdu.mdsd.micro_lang.MicroLangModelUtil
import dk.sdu.mdsd.micro_lang.microLang.TypedParameter
import java.util.List
import dk.sdu.mdsd.micro_lang.microLang.Operation
import dk.sdu.mdsd.micro_lang.microLang.Return

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MicroLangGenerator extends AbstractGenerator {
	
	@Inject
	extension MicroLangModelUtil
	
	public static val GEN_TEMPLATES_INTERFACE_DIR = "templates/"
	public static val GEN_MICROSERVICES_INTERFACE_DIR = "microservices/"
	
	public static val GEN_TEMPLATES_IMPL_DIR = GEN_TEMPLATES_INTERFACE_DIR + "impl/"
	public static val GEN_MICROSERVICES_IMPL_DIR = GEN_MICROSERVICES_INTERFACE_DIR + "microservices/"
	
	public static val RES_LIB = 'src/resources/generator/lib.txt'

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(Element).forEach[generateElement(fsa)]
		
		fsa.generateFileFromResource(RES_LIB)
		
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	def dispatch generateElement(Template template, IFileSystemAccess2 fsa) {
		val interfaceDir = GEN_TEMPLATES_INTERFACE_DIR
		val interfacePackage = interfaceDir.replaceAll("/", ".").substring(0, interfaceDir.length - 1)
		val interfaceName = template.name.toFileName
		
		fsa.generateFile(interfaceDir + interfaceName + '.java', template.generateInterfaceCode(interfacePackage, interfaceName))
	}
	
	def dispatch generateElement(Microservice microservice, IFileSystemAccess2 fsa) {
	}
	
	def dispatch generateInterfaceCode(Template template, String pkg, String name)'''
		«generateHeader»
		package «pkg»;
		
		public interface «name» {
			
			«FOR declaration : template.declarations»
			«declaration.generateDeclarationInterfaceCode»
			«ENDFOR»
		}
	'''
	
	def dispatch generateInterfaceCode(Microservice microservice, String pkg, String name)'''
	'''
	
	def dispatch generateDeclarationInterfaceCode(Uses uses)'''
		//code for injecting microservice
	'''
	
	def dispatch generateDeclarationInterfaceCode(Implements implement)'''
		//code for implementing a template
	'''
	
	def dispatch generateDeclarationInterfaceCode(Endpoint endpoint)'''
		«FOR operation : endpoint.operations»
			«endpoint.generateMethodSignature(operation)»«operation.parameters.generateParameters»;
			
		«ENDFOR»
	'''
	
	def generateMethodSignature(Endpoint endpoint, Operation operation)
		'''«operation.returnType.generateReturnCode» «endpoint.path.toMethodName(operation.method.name)»'''
	
	def generateParameters(List<TypedParameter> params)
		'''(«FOR param : params SEPARATOR ', '»«param.type.asString» _«param.name»«ENDFOR»)'''
	
	def generateReturnCode(Return returnType)
		'''«IF returnType === null»void«ELSE»«returnType.type.asString»«ENDIF»'''
	
	def toFileName(String name) {
		CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, name)
	}
	
	def toMethodName(String path, String operation) {
		var pathName = path.replaceAll("/", "_")
		val operationName = operation.toLowerCase
		pathName = CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, pathName)
		operationName + pathName
	}
	
	def generateFileFromResource(IFileSystemAccess2 fsa, String resource) {
		val urlInputStream = class.classLoader.getResourceAsStream(resource)
		
		val nameIndex = resource.lastIndexOf('/') + 1
		val fileName = resource.substring(nameIndex)
		fsa.generateFile(fileName, urlInputStream)
	}
	
	def generateHeader()'''
		/**
		 * Generated by MicroLang
		 */
 	'''
	
}
