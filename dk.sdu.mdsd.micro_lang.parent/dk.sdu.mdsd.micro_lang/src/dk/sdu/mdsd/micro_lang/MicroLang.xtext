grammar dk.sdu.mdsd.micro_lang.MicroLang with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate microLang "http://www.sdu.dk/mdsd/micro_lang/MicroLang"

Model:
	elements+=Element*
;

terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';
terminal IP returns ecore::EString: INT ('.' INT)+;

Element:
	Template | Microservice
;

Template:
	'template' name=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')')?
	(BEGIN
		declarations+=Declaration*
	END)*
;

Microservice:
	'microservice' name=ID location=Location
	(BEGIN
		declarations+=Declaration*
	END)*
;

Location:
	'@' host=(IP | ID) ':' port=INT
;

Declaration:
	Uses | Implements | Endpoint
;

Uses:
	'uses' target=[Microservice]
;

Implements:
	'implements' target=[Template] ('(' arguments+=Argument (',' arguments+=Argument)* ')')?
;

Argument:
	name=STRING | '{' target=[Parameter] '}'
;

Endpoint:
	pathParts+=PathPart+
	BEGIN
		operations+=Operation+
	END
;

PathPart:
	NormalPath | ParameterPath
;

NormalPath:
	{NormalPath} '/' (name=ID | '{' target=[Parameter] '}')?
;

ParameterPath:
	'/' '{' parameter=TypedParameter '}'
;

Operation:
	method=Method
	(BEGIN
		statements+=Statement*
	END)*
;

Method:
	name=('GET' | 'POST' | 'PUT' | 'DELETE' | 'OPTIONS') | '{' target=[Parameter] '}'
;

Statement:
	TypedParameter | Return
;

Parameter:
	name=ID
;

TypedParameter:
	type=Type (name=ID | '{' target=[Parameter] '}') (require=Require)?
;

Require:
	{Require} 'require' (logic=Logic)?
;

Logic:
	left=LogicAnd ('||' right=Logic)?
;

LogicAnd:
	left=Compare ('&&' right=LogicAnd)?
;

ExternOrCompare:
	/*Extern | */Compare
;

Extern:
	call=[TypedParameter] '(' exps+=Exp (',' exps+=Exp)* ')'
;

Compare:
	left=Attribute op=COp right=Exp
;

Attribute:
	attribute=('length' | 'value')
;

COp:
	lt?='<' | gt?='>' | eq?='=' | lte?='<=' | gte?='>='
;

Exp:
	Factor (({Plus.left=current} '+' | {Minus.left=current} '-') right=Factor)* 
;

Factor:
	Prim (({Mult.left=current} '*' | {Div.left=current} '/') right=Prim)?
;

Prim:
	Number /*| Variable */| '(' exp=Exp ')'
;

Variable:
	var=[Require]
;

Number:
	value=INT
;

Return:
	'return' type=Type
;

Type:
	name=('bool' | 'string' | 'int' | 'double') | '{' target=[Parameter] '}'
;